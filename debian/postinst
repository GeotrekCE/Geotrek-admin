#!/bin/sh -e

# set -x
# export DEBCONF_DEBUG=developer

# Source debconf library.
. /usr/share/debconf/confmodule

db_get geotrek-admin/MANAGE_DB; export MANAGE_DB="$RET"

db_get geotrek-admin/POSTGRES_HOST; export POSTGRES_HOST="$RET"
db_get geotrek-admin/POSTGRES_PORT; export POSTGRES_PORT="$RET"
db_get geotrek-admin/POSTGRES_USER; export POSTGRES_USER="$RET"
db_get geotrek-admin/POSTGRES_PASSWORD; export POSTGRES_PASSWORD="$RET"
db_get geotrek-admin/POSTGRES_DB; export POSTGRES_DB="$RET"

db_get geotrek-admin/SRID; export SRID="$RET"

db_get geotrek-admin/TIME_ZONE; export TIME_ZONE="$RET"
db_get geotrek-admin/LANGUAGES; export LANGUAGES="$RET"
db_get geotrek-admin/SERVER_NAME; export SERVER_NAME="$RET"
db_get geotrek-admin/RANDO_SERVER_NAME; export RANDO_SERVER_NAME="$RET"
if [ -n "${RANDO_SERVER_NAME}" ] && [ "${RANDO_SERVER_NAME}" != "*" ]; then
    export RANDO_SERVER_NAME_PIPE="^`echo "$RANDO_SERVER_NAME" | sed 's/ /|/g'`$"
else
    export RANDO_SERVER_NAME_PIPE="`echo "$RANDO_SERVER_NAME" | sed 's/ /|/g'`"
fi
db_get geotrek-admin/DEFAULT_STRUCTURE; export DEFAULT_STRUCTURE="$RET"

db_get geotrek-admin/WORKERS; export WORKERS="$RET"
db_get geotrek-admin/TIMEOUT; export TIMEOUT="$RET"

export DOLLAR="$"
export CONVERSION_HOST="localhost"
export CONVERSION_PORT="6543"
export CAPTURE_HOST="localhost"
export CAPTURE_PORT="8000"
export NGINX_PORT="80"
export MEMCACHED_HOST="127.0.0.1"
export MEMCACHED_PORT="11211"

# Create geotrek user (only on a new install)
if [ "$2" = "" ]; then
	adduser --system --group --no-create-home --quiet geotrek || true
fi

# Create directories
mkdir -p /opt/geotrek-admin/var/conf/extra_static || true
mkdir -p /opt/geotrek-admin/var/log || true
mkdir -p /opt/geotrek-admin/var/media/upload || true
mkdir -p /opt/geotrek-admin/var/cache/sessions || true
mkdir -p /opt/geotrek-admin/var/cache/api_v2 || true
mkdir -p /opt/geotrek-admin/var/cache/fat || true
mkdir -p /opt/geotrek-admin/var/pid || true
mkdir -p /opt/geotrek-admin/var/mobile || true
chown -R geotrek.geotrek /opt/geotrek-admin/var || true

# Create database (only on a new install)
echo "MANAGE_DB : $MANAGE_DB - $2"
if [ "$MANAGE_DB" = "true" ] && [ -z "$2" ]; then
	echo "Create Database" >&2
	su postgres -c "psql -q -c \"CREATE USER $POSTGRES_USER PASSWORD '$POSTGRES_PASSWORD';\"" || true
	su postgres -c "psql -q -c 'CREATE DATABASE $POSTGRES_DB OWNER $POSTGRES_USER;'" || true
	su postgres -c "psql -q -d $POSTGRES_DB -c 'CREATE EXTENSION postgis;'" || true
	# postgis_raster is only useful on postgis 3, it fails on postgis 2 but this is harmless
	su postgres -c "psql -q -d $POSTGRES_DB -c 'CREATE EXTENSION postgis_raster;'" || true
	su postgres -c "psql -q -d $POSTGRES_DB -c 'CREATE EXTENSION pgcrypto;'" || true
	su postgres -c "psql -q -d $POSTGRES_DB -c 'CREATE EXTENSION pgrouting;'" || true
fi

# Generate secret key
SECRET_KEY_FILE=/opt/geotrek-admin/var/conf/secret_key
if [ ! -f $SECRET_KEY_FILE ]; then
	echo "Generate secret key" >&2
    dd bs=48 count=1 if=/dev/urandom 2>/dev/null | base64 > $SECRET_KEY_FILE
	chown geotrek.geotrek $SECRET_KEY_FILE
    chmod go-r $SECRET_KEY_FILE
fi

# Generate config files
echo "Generate configuration" >&2
[ -f /opt/geotrek-admin/var/conf/custom.py ] || touch /opt/geotrek-admin/var/conf/custom.py
CONF_DIR=/opt/geotrek-admin/var/conf
for f in env nginx.conf gunicorn-geotrek.conf.py gunicorn-geotrek_api.conf.py; do
	cat > $CONF_DIR/$f << END
# Generated by dpkg installation. DO NOT MODIFY MANUALLY.
# Instead, run "sudo dpkg-reconfigure geotrek-admin"
# or edit /opt/geotrek-admin/var/conf/$f.in

END
	envsubst < $CONF_DIR/$f.in >> $CONF_DIR/$f
	chown geotrek.geotrek $CONF_DIR/$f || true
done

# Install config files
ln -sf $CONF_DIR/nginx.conf /etc/nginx/sites-available/geotrek.conf
ln -sf /etc/nginx/sites-available/geotrek.conf /etc/nginx/sites-enabled/geotrek.conf

# Run ldconfig to make sure dlopen("cairo") works
LDCONFIG_NOTRIGGER=y
export LDCONFIG_NOTRIGGER
ldconfig

# Update database
echo "Migrate database" >&2
geotrek migrate --noinput -v0 || true
geotrek clearsessions || true
geotrek update_geotrek_permissions -v0 || true
geotrek update_post_migration_languages -v0 || true

# Collect statics
echo "Copy static files" >&2
geotrek collectstatic --clear --noinput -v0 || true

# Insert initial data (only on a new install with an empty database)
if [ "$MANAGE_DB" = "true" ] && [ -z "$2" ]; then
	echo "Insert initial data" >&2
	geotrek loaddata -v0 minimal || true
	geotrek loaddata -v0 cirkwi || true
	geotrek loaddata -v0 basic || true
	geotrek loaddata -v0 licenses || true
	geotrek loaddata -v0 circulations || true
	for dir in `ls -d /opt/geotrek-admin/lib/python3*/site-packages/geotrek/*/fixtures/upload`; do
		cd $dir > /dev/null
		cp -r * /opt/geotrek-admin/var/media/upload/
	done
	chown --recursive geotrek:geotrek /opt/geotrek-admin/var/media/upload/*
fi

echo "Reload" >&2
# Reload nginx
if [ -f /etc/init.d/nginx ] ; then
	if which invoke-rc.d > /dev/null ; then
		if invoke-rc.d nginx status > /dev/null 2>&1 ; then
			invoke-rc.d nginx reload 3>/dev/null || true
		fi
	else
		if /etc/init.d/nginx status > /dev/null 2>&1 ; then
			/etc/init.d/nginx reload 3>/dev/null || true
		fi
	fi
fi

rm -rf /opt/geotrek-admin/var/tmp/*

# TODO: geotrek user, crontab, certbot

#DEBHELPER#
